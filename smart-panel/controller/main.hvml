
<define as 'main_log' at="_topmost">
    <inherit>
    <!--
        $STREAM.stdout.writelines("$?")
    -->
    </inherit>
</define>

<define as 'post_event_to_lockscreen' at="_topmost">
    <execute with $main_log on "@@@@@ post to lockscreen: $?" />
    <request on="/-/lockscreen/CHAN/chanLockscreen" to="post" with=$? />
</define>

<define as 'on_lockscreen_state_event' at="_topmost">
    <execute with $main_log on "@@@@@ on_lockscreen_state_event: $?" />
    <test on $?.name>
        <match for "AS 'lock'" exclusively>
            <request on '#mainContent' to="call:enable_post_music_event()" noreturn />
        </match>
        <match for "AS 'unlock'" exclusively>
            <request on '#mainContent' to="call:disable_post_music_event()" noreturn />
        </match>

        <match for "AS 'autoSwitchThemeLight'" exclusively>
            <request on '.switch-theme-to-light' to 'call:ELEMENT.classList.add("active")' noreturn />
            <request on '.switch-theme-to-dark' to 'call:ELEMENT.classList.remove("active")' noreturn />
            <update on '#theMainBody' at 'attr.data-bs-theme' with 'light' />
        </match>
        <match for "AS 'autoSwitchThemeDark'" exclusively>
            <request on '.switch-theme-to-light' to 'call:ELEMENT.classList.remove("active")' noreturn />
            <request on '.switch-theme-to-dark' to 'call:ELEMENT.classList.add("active")' noreturn />
            <update on '#theMainBody' at 'attr.data-bs-theme' with 'dark' />
        </match>

        <match for="ANY">
        </match>
    </test>
</define>

<define as 'on_music_player_event' at="_topmost">
    <execute with $main_log on "@@@@@ on_music_player_event: $?" />
    <test on $?.name>
        <match for "AS 'playOrPause'" exclusively>
            <fire on '#id_music_play_or_pause' for 'click' />
        </match>
        <match for "AS 'prev'" exclusively>
            <fire on '#id_music_switch_to_prev' for 'click' />
        </match>
        <match for "AS 'next'" exclusively>
            <fire on '#id_music_switch_to_next' for 'click' />
        </match>
        <match for "AS 'volume'" exclusively>
            <request on '#mainContent' to="call:music_player_volume_change(ARG)" with $3?.value noreturn />
            <!--
            <request on '#mainContent' to="call:post_music_player_state_change_event()" noreturn />
            -->
        </match>
        <match for "AS 'mute'" exclusively>
            <request on '#mainContent' to="call:music_player_mute_click()" noreturn />
        </match>

        <match for="ANY">
        </match>
    </test>
</define>

<define as 'on_channel_event' at="_topmost">
    <execute with $main_log on "@@@@@  main Got a message: $?" />
    <test on $?.type>
        <match for "AS 'lockscreenState'" exclusively>
            <execute with $on_lockscreen_state_event on $3? />
        </match>

        <match for "AS 'musicPlayer'" exclusively>
            <execute with $on_music_player_event on $3? />
        </match>

        <match for "AS 'network'" exclusively>
        </match>

        <match for="ANY">
        </match>
    </test>
</define>

<observe on $chIn for 'innerEvent'>
    <execute with $on_channel_event on $? />
</observe>

<observe on $chIn for 'receivable'>
    <execute with $main_log on "@@@@@  main recv count ($chIn.len)" />
    <init as 'dataArray' temp>
        []
    </init>
    <iterate on 1 onlyif $L.gt($chIn.len, 0) with 1L nosetotail>
        <choose on $chIn.recv() silently>
            <test with $L.streq('caseless', 'object', $DATA.type($?))>
                <update on $dataArray to 'append' with $? />
            </test>
        </choose>
    </iterate>

    <iterate on $dataArray>
        <execute with $on_channel_event on $? />
    </iterate>
</observe>

<observe on '#mainContent' for 'locked'>
    <execute with $post_event_to_lockscreen on {'type':'lockscreen', 'name':'lock'} />
</observe>

<observe on '.time-to-lock-screen' for 'click'>
    <test with $L.ne($main_data.lockscreenTimeout, $?.originValue) >
        <execute with $main_log on "@@@@@ Changing time-to-lock to $2?.originValue $2?.originId" />
        <update on "#theTimeToLockIcon{$main_data.lockscreenTimeout}" to 'displace' at 'attr.class' with 'd-none' />
        <update on "#theTimeToLockIcon{$2?.originValue}" to 'displace' at 'attr.class' with 'x-show' />
        <update on $main_data at '.lockscreenTimeout' with "$2?.originValue" />

        <execute with $post_event_to_lockscreen on {'type':'lockscreen', 'name':'timeOut', 'data':$2?.originValue} />
    </test>
</observe>

<observe on '#mainContent' for 'load'>
    <execute with $post_event_to_lockscreen on {'type':'lockscreen', 'name':'enableUnlock'} />
    <test with $music_info.playing >
        <request on ".music-pic" to='call:ELEMENT.classList.add("animate-img")' noreturn />
        <request on "#theMusicPlayer" to='call:set_music_play_or_pause_btn_icon(ARG)' with 'true' noreturn />
        <update on $music_info at '.playing' with true />
        <request on '#theMusicPlayer' to="call:ELEMENT.play()" noreturn />
        <request on '#theMusicPlayer' to="call:ELEMENT.currentTime=ARG" with $music_info.currentTime noreturn />
    </test>
</observe>

<observe on '.switch-theme-to-dark' for 'click'>
    <execute with $post_event_to_lockscreen on {'type':'lockscreen', 'name':'themeToDark'} />
</observe>

<observe on '.switch-theme-to-light' for 'click'>
    <execute with $post_event_to_lockscreen on {'type':'lockscreen', 'name':'themeToLight'} />
</observe>

<observe on '#theMusicPlayer' for 'stateChange'>
    <execute with $main_log on "@@@@@ stateChange" />
    <choose on $?.originValue silently>
        <execute with $post_event_to_lockscreen on $? />
        <test on $?.name>
            <match for "AS 'timeupdate'" exclusively>
                <update on $music_info at '.currentTime' with $3?.currentTime />
            </match>
        </test>
    </choose>
</observe>

<observe on $CRTN for "rdrState:newRenderer">
    <execute with $main_log on "@@@@@ switch to new rdr" />
    <execute with $post_event_to_lockscreen on {'type':'lockscreen', 'name':'lock'} />
</observe>


