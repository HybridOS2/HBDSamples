<init as 'weather_map'>
    {
        bingbao:    [! 'bi bi-cloud-sleet-fill',            'bg-weather-sleet' ],
        lei:        [! 'bi bi-cloud-lightning-rain-fill',   'bg-weather-lightning' ],
        qing:       [! 'bi bi-sun-fill',                    'bg-weather-sun' ],
        shachen:    [! 'bi bi-wind',                        'bg-weather-sandstorm' ],
        wu:         [! 'bi bi-cloud-fog-fill',              'bg-weather-fog' ],
        xue:        [! 'bi bi-cloud-snow-fill',             'bg-weather-snow' ],
        yin:        [! 'bi bi-cloud-fill',                  'bg-weather-cloud' ],
        yun:        [! 'bi bi-cloud-sun-fill',              'bg-weather-cloud-sun' ],
        yu:         [! 'bi bi-cloud-rain-fill',             'bg-weather-rain' ],
    }
</init>

<init as "lockscreen_week">
    [
        "星期日",
        "星期一",
        "星期二",
        "星期三",
        "星期四",
        "星期五",
        "星期六"
    ]
</init>

<define as 'post_event_to_main' at="_topmost">
    <inherit>
        $STREAM.stdout.writelines("#################      lockscreen post event: $?")
    </inherit>
    <test with $lockscreen_option.enablePostEvent >
        <request on="/-/main/CHAN/chanMain" to="post" with=$2? />
    </test>
</define>

<define as 'unlock' at="_topmost">
    <request on="$RDR" to="updatePlainWindow">
    {
        "data": {
            layoutStyle: 'window-position:50% -480px; window-size:480px 480px;'
        }
    }
    </request>
    <include with $post_event_to_main on {'type':'lockscreenState', 'name':'unlock'} />
</define>

<define as 'lock' at="_topmost">
    <request on="$RDR" to="updatePlainWindow">
    {
        "data": {
            layoutStyle: 'window-position:center; window-size:480px 480px;'
        }
    }
    </request>
    <include with $post_event_to_main on {'type':'lockscreenState', 'name':'lock'} />
</define>

<define as 'on_lockscreen_event' at="_topmost">
    <inherit>
        $STREAM.stdout.writelines("on_lockscreen_event: $?")
    </inherit>
    <test on $?.name>
        <match for "AS 'enableUnlock'" exclusively>
            <update on "$lockscreen_option" at '.enableUnlock' with true />
            <request on "#id__unlock__btn" to 'call:ELEMENT.classList.remove(ARG)' with 'text-secondary' noreturn />
            <request on "#id__unlock__btn" to 'call:ELEMENT.classList.add(ARG)' with 'text-light' noreturn />
        </match>
        <match for "AS 'lock'" exclusively>
            <include with $lock />
        </match>
        <match for "AS 'unlock'" exclusively>
            <include with $unlock />
        </match>
        <match for "AS 'themeToDark'" exclusively>
            <update on $theme_option at ".user" with 1L />
            <update on '#theMainBody' at 'attr.data-bs-theme' with 'dark' />
        </match>
        <match for "AS 'themeToLight'" exclusively>
            <update on $theme_option at ".user" with 2L />
            <update on '#theMainBody' at 'attr.data-bs-theme' with 'light' />
        </match>

        <match for="ANY">
        </match>
    </test>
</define>

<define as 'on_music_player_event' at="_topmost">
    <test on $?.name>
        <match for "AS 'playerState'" exclusively>
            <test on $3?.playState>
                <match for "AS 'playing'" exclusively>
                    <request on ".music-pic" to='call:ELEMENT.classList.add("animate-img")' noreturn />
                    <request on ".music-play-or-pause i" to='call:ELEMENT.classList.replace(ARG[0], ARG[1])' with ['bi-play-circle-fill', 'bi-pause-circle-fill'] noreturn />
                    <update on $music_info at '.playing' with true />
                </match>
                <match for "AS 'paused'" exclusively>
                    <request on ".music-pic" to='call:ELEMENT.classList.remove("animate-img")' noreturn />
                    <request on ".music-play-or-pause i" to='call:ELEMENT.classList.replace(ARG[0], ARG[1])' with ['bi-pause-circle-fill', 'bi-play-circle-fill'] noreturn />
                    <update on $music_info at '.playing' with false />
                </match>
            </test>
        </match>

        <match for "AS 'timeupdate'" exclusively>
            <update on "#id_progress_prev" at 'textContent' with $3?.prevContent />
            <update on "#id_progress_next" at 'textContent' with $3?.nextContent />
            <update on "#id_progress_fill" at 'attr.style' with $3?.progressFill />
        </match>

        <match for "AS 'volumeChange'" exclusively>
            <update on "#id__volume__value" at 'attr.value' with $3?.volume />
        </match>

        <match for "AS 'mutedChange'" exclusively>
            <test with $3?.muted >
                <request on "#id__volume__mute__icon" to='call:ELEMENT.classList.replace(ARG[0], ARG[1])' with ['text-secondary', 'text-danger'] noreturn />
                <request on "#id__volume__up__icon" to='call:ELEMENT.classList.replace(ARG[0], ARG[1])' with ['text-primary', 'text-secondary'] noreturn />
                <differ>
                    <request on "#id__volume__mute__icon" to='call:ELEMENT.classList.replace(ARG[0], ARG[1])' with ['text-danger', 'text-secondary'] noreturn />
                    <request on "#id__volume__up__icon" to='call:ELEMENT.classList.replace(ARG[0], ARG[1])' with ['text-secondary', 'text-primary'] noreturn />
                </differ>
            </test>
        </match>

        <match for "AS 'musicChange'" exclusively>
            <update on '.music-pic' at 'attr.src' with $3?.img />
            <update on '.music-title' at 'textContent' with $3?.title />
            <update on '.music-artist' at 'textContent' with $3?.artist />
        </match>

        <match for="ANY">
        </match>
    </test>
</define>

<observe on $chIn for 'receivable'>
    <choose on $chIn.recv() silently>
        <test on $?.type>
            <match for "AS 'weather'" exclusively>
                <inherit>
                    $STREAM.stdout.writelines("Got a weather change message: $3?.value.wea_img")
                </inherit>

                <update on '#theWeatherIcon' to 'displace' at 'attr.class' with $weather_map[$3?.value.wea_img][0] />
                <update on '#theWeatherTemp' to 'displace' at 'textContent' with $3?.value.tem />
                <update on '#theWeatherCity' to 'displace' at 'textContent' with $3?.value.city />
                <request on '#theLockScreen' to 'call:ELEMENT.classList.remove(ARG)' with $running_state.bg_lockscreen noreturn />
                <update on $running_state to 'displace' at '.bg_lockscreen' with $weather_map[$3?.value.wea_img][1] />
                <request on '#theLockScreen' to 'call:ELEMENT.classList.add(ARG)' with $running_state.bg_lockscreen noreturn />
            </match>

            <match for "AS 'network'" exclusively>
            </match>

            <match for "AS 'lockscreen'" exclusively>
                <include with $on_lockscreen_event on $3? />
            </match>

            <match for "AS 'musicPlayer'" exclusively>
                <include with $on_music_player_event on $3? />
            </match>

            <match for="ANY">
            </match>
        </test>
    </choose>
    <test with $L.gt($chIn.len, 0)>
        <fire on $chIn for 'receivable' />
    </test>
</observe>

<init as 'lockscreen_hm'>
    {
        "hour": 0,
        "min": 0
    }
</init>

<init as 'lockscreen_mdw'>
    {
        "mon": 0,
        "mday": 0,
        "wday": 0
    }
</init>

<observe on $TIMERS for "expired:clock_timer">
    <init as dt with $DATETIME.localtime() temp />
    <test with $L.or($L.ne($dt.hour, $lockscreen_hm.hour), $L.ne($dt.min, $lockscreen_hm.min)) >
        <update on '#theCurrentTime' at 'textContent' with $DATETIME.fmttime("%H:%M") />
        <update on $lockscreen_hm at ".hour .min" with [$dt.hour, $dt.min] />
    </test>

    <test with $L.or($L.ne($dt.mon, $lockscreen_mdw.mon), $L.ne($dt.mday, $lockscreen_mdw.mday), $L.ne($dt.wday, $lockscreen_mdw.wday)) >
        <update on "#theCurrentDate" at content with "$DATETIME.fmttime('%m月%d日') $lockscreen_week[$dt.wday]" />
        <update on $lockscreen_mdw at ".mon .mday .wday" with [$dt.mon, $dt.mday, $dt.wday] />
    </test>

    <test with $L.eq($theme_option.user, 0)>
        <test with $L.and($L.ge($dt.hour, 8), $L.lt($dt.hour, 18)) >↵
            <test with $L.ne($running_state.theme, 2)>↵
                <update on $running_state at ".theme" with 2L />↵
                <update on '#theMainBody' at 'attr.data-bs-theme' with 'light' />
                <include with $post_event_to_main on {'type':'lockscreenState', 'name':'autoSwitchThemeLight'} />
            </test>↵
            <differ>↵
                <test with $L.ne($running_state.theme, 1)>↵
                    <update on $running_state at ".theme" with 1L />↵
                    <update on '#theMainBody' at 'attr.data-bs-theme' with 'dark' />
                    <include with $post_event_to_main on {'type':'lockscreenState', 'name':'autoSwitchThemeDark'} />
                </test>↵
            </differ>↵
        </test>↵
    </test>
</observe>

<observe on '#theLockScreen' for 'locked'>
    <inherit>
        $STREAM.stdout.writelines("screen locked")
    </inherit>
</observe>

<observe on '#theLockScreen' for 'unlocked'>
    <inherit>
        $STREAM.stdout.writelines("screen unlocked")
    </inherit>
</observe>

<observe on '.time-to-lock-screen' for 'click'>
    <choose on $DOC.query("#theLockScreen").attr('data-time-to-lock') >
        <test with $L.ne($?, $2?.originValue) >
            <inherit>
                $STREAM.stdout.writelines("Changing time-to-lock to $3?.originValue $3?.originId")
            </inherit>

            <update on '#theLockScreen' at 'attr.data-time-to-lock' with "$3?.originValue" />
            <request on "#theTimeToLock{$?} span" to 'call:ELEMENT.classList.add(ARG)' with 'd-none' noreturn />
            <request on "#$3?.originId span" to 'call:ELEMENT.classList.remove(ARG)' with 'd-none' noreturn />
        </test>
    </choose>

</observe>

<observe on "#id__unlock__btn" for "click">
    <test with $lockscreen_option.enableUnlock >
        <include with $unlock />
        <differ>
            <inherit>
                $STREAM.stdout.writelines("#####> not allow unlock")
            </inherit>
        </differ>
    </test>
</observe>


<observe on '.music-switch-to-prev' for 'click'>
    <inherit>
        $STREAM.stdout.writelines("music-switch-to-prev clicked")
    </inherit>
    <include with $post_event_to_main on {'type':'musicPlayer', 'name':'prev'} />
</observe>

<observe on '.music-switch-to-next' for 'click'>
    <inherit>
        $STREAM.stdout.writelines("music-switch-to-next clicked")
    </inherit>
    <include with $post_event_to_main on {'type':'musicPlayer', 'name':'next'} />
</observe>

<observe on '.music-play-or-pause' for 'click'>
    <inherit>
        $STREAM.stdout.writelines("music-play-or-pause clicked")
    </inherit>
    <include with $post_event_to_main on {'type':'musicPlayer', 'name':'playOrPause'} />
</observe>

<observe on '.range-for-music-volume' for 'change'>
    <inherit>
        $STREAM.stdout.writelines("music-player volume change $?.targetValue")
    </inherit>
    <include with $post_event_to_main on {'type':'musicPlayer', 'name':'volume', 'value':$?.targetValue} />
</observe>

<observe on '#id__volume__mute' for 'click'>
    <inherit>
        $STREAM.stdout.writelines("music-player volumn mute")
    </inherit>
    <include with $post_event_to_main on {'type':'musicPlayer', 'name':'mute'} />
</observe>


