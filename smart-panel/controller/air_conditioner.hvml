<observe on '.temp-up-for-air-conditioner' for 'click'>
    <inherit>
        $STREAM.stdout.writelines("TempUp of air conditioner for $?.originName clicked")
    </inherit>

    <init as 'currentTemp' with $DOC.query("#theACTempFor$?.originName").attr('data-current-temp') temp />

    <init as 'targetTemp' with $DATA.arith('+', $currentTemp, 1L) temp />

    <test with $L.gt($targetTemp, 35L) >
        <inherit>
            $STREAM.stdout.writelines("temp reaches max value")
        </inherit>

        <request on '#theToastAlertingMaxTemp' to="call:bootstrap.Toast.getOrCreateInstance(ELEMENT).show()" noreturn />
        <differ>
            <update on "#theACTempFor$?.originName" to 'displace' at 'attr.data-current-temp' with "$targetTemp" />
            <update on "#theACTempFor$?.originName" to 'displace' at 'textContent' with "$targetTemp°C" />
            <update on "#theACTempFor$?.originName" to 'displace' at 'attr.style' with "width: $MATH.eval('(x - 15) * 100 / 20', { x: $targetTemp })%" />

            <test with $L.eq($targetTemp, 30L) >
                <request on "#theACTempFor$?.originName" to='call:ELEMENT.classList.replace("bg-success", ARG)' with 'bg-warning' noreturn />
            </test>

            <test with $L.eq($targetTemp, 20L) >
                <request on "#theACTempFor$?.originName" to='call:ELEMENT.classList.replace("bg-info", ARG)' with 'bg-success' noreturn />
            </test>
        </differ>
    </test>
</observe>

<observe on '.temp-down-for-air-conditioner' for 'click'>
    <inherit>
        $STREAM.stdout.writelines("TempDown of air conditioner for $?.originName clicked")
    </inherit>

    <init as 'currentTemp' with $DOC.query("#theACTempFor$?.originName").attr('data-current-temp') temp />

    <init as 'targetTemp' with $DATA.arith('-', $currentTemp, 1L) temp />

    <test with $L.lt($targetTemp, 15L) >
        <inherit>
            $STREAM.stdout.writelines("temp reaches min value")
        </inherit>

        <request on '#theToastAlertingMinTemp' to='call:bootstrap.Toast.getOrCreateInstance(ELEMENT).show()' noreturn />
        <differ>
            <update on "#theACTempFor$?.originName" to 'displace' at 'attr.data-current-temp' with "$targetTemp" />
            <update on "#theACTempFor$?.originName" to 'displace' at 'textContent' with "$targetTemp°C" />
            <update on "#theACTempFor$?.originName" to 'displace' at 'attr.style' with "width: $MATH.eval('(x - 15) * 100 / 20', { x: $targetTemp })%" />

            <test with $L.eq($targetTemp, 20L) >
                <request on "#theACTempFor$?.originName" to='call:ELEMENT.classList.replace("bg-success", ARG)' with 'bg-info' noreturn />
            </test>

            <test with $L.eq($targetTemp, 30L) >
                <request on "#theACTempFor$?.originName" to='call:ELEMENT.classList.replace("bg-warning", ARG)' with 'bg-success' noreturn />
            </test>
        </differ>
    </test>
</observe>

<define as 'updateTemp'>
    <update on "#theACTempFor$originName" to 'displace' at 'attr.data-current-temp' with "$targetTemp" />
    <update on "#theACTempFor$originName" to 'displace' at 'textContent' with "$targetTemp°C" />
    <update on "#theACTempFor$originName" to 'displace' at 'attr.style' with "width: $MATH.eval('(x - 15) * 100 / 20', { x: $targetTemp })%" />

    <init as 'newBgClass' with 'bg-success' />

    <test with $L.gt($targetTemp, 30L) >
        <init as 'newBgClass' at '_grandparent' with 'bg-warning' />
        <differ>
            <test with $L.lt($targetTemp, 20L) >
                <init as 'newBgClass' at '4' with 'bg-info' />
            </test>
        </differ>
    </test>

    <request on "#theACTempFor$originName" to='call:ELEMENT.classList.remove(ARG[0], ARG[1], ARG[2]); ELEMENT.classList.add(ARG[3])'
            with [ 'bg-info', 'bg-success', 'bg-warning', $newBgClass] noreturn />

</define>

<observe on '.temp-change-for-air-conditioner' for 'click'>
    <!-- inherit>
        $STREAM.stdout.writelines("Change Temp. of air conditioner for $?.originName: $?.relativeX")
    </inherit -->

    <init as 'relativeX' with $?.relativeX temp />
    <init as 'currentTemp' with $DATA.numerify($DOC.query("#theACTempFor$?.originName").attr('data-current-temp')) temp />

    <test with $?.targetDiffersOrigin >
        <init as 'relativeX' at '_grandparent' with $MATH.eval('(x - 15) * y / 20', { x: $currentTemp, y: $?.relativeX }) temp silently />
    </test>

    <init as 'targetTemp' with $DATA.arith('+', 0, $MATH.eval('15 + 20 * x', { x: $relativeX })) temp />

    <!-- inherit>
        $STREAM.stdout.writelines("Normalized x: $relativeX, current temp: $currentTemp, target temp: $targetTemp")
    </inherit -->

    <test with $L.and($L.ge($targetTemp, 15L), $L.le($targetTemp, 35L)) >
        <call on $updateTemp with { originName: $?.originName, targetTemp: $targetTemp } />
    </test>
</observe>

